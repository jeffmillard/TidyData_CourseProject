{
    "contents" : "## =============================================================================\n## Function:\trun_analysis.R function()\n## -----------------------------------------------------------------------------\n## Assignment Requirements:\n#\n# \tCreate one R script called run_analysis.R that does the following. \n# \t\t1. Merges the training and the test sets to create one data set.\n# \t\t2. Extracts only the measurements on the mean and standard deviation \n#    \t\t   for each measurement. \n# \t\t3. Uses descriptive activity names to name the activities in the \n#\t\t   data set.\n#\t\t4. Appropriately labels the data set with descriptive activity names. \n#\t\t5. Creates a second, independent tidy data set with the average of \n#\t\t   each variable for each activity and each subject. \n##\n## Description and Approach\n#\n#\tPart 1: Merging the subject index, activity index, training and test sets. \n#\t\t\tA. Read and merge data\n#\t\t\tB. I have chosen to save this combined data set, \n#\t\t\t   even though this is not required for the assignment.\n#\n#\tPart 2: \tExtracts measurements of mean and SD.\n#\t\t\tA. Subset to only subject, activity and data columns that are\n#\t\t\t   mean (column name contains \"mean()\") or standard deviation\n#\t\t\t   column name contains \"std()\").\n#\t\t\tB. Modify column names to provide appropriate column headings.\n#\n#\tPart 3: Create tidy data set of averages and save as .txt file\n#\t\t\tA. \n#\t\t\tB. Created tidyDF.txt as tab-delimited file\n#\n#\n## Data Source Reference:  \n#\tDavide Anguita, Alessandro Ghio, Luca Oneto, Xavier Parra and Jorge L. \n#\tReyes-Ortiz. Human Activity Recognition on Smartphones using a Multiclass \n#\tHardware-Friendly Support Vector Machine. International Workshop of \n#\tAmbient Assisted Living (IWAAL 2012). Vitoria-Gasteiz, Spain. Dec 2012\n#\n\nrun_analysis <- function() {\n\n\t## ========================================================================\n\t##  PART 1. Combining test and training data sets along with Subject ID,\n\t##\t\tActivity Description, and providing appropriate column labels.\n\t## ========================================================================\n\t\n\t# need this for dcast.data.table\n\tlibrary(data.table)\n\t\n\t# -------------------------------------------------------------------------\n\t# Define the locations/names of the files we will use\n\t# -------------------------------------------------------------------------\n\t# My working directory containg the UCI HAR Dataset is datacleaning.  This \n\t# line would need to change to match your directory structure\n\tsetwd(\"~/datacleaning/\")\n\t\n\t# directory for unzipped data files\n\tdatadir <- \"./UCI HAR Dataset\"\n\n\t# test data set\n\ttestx \t<- paste(datadir, \"test/X_test.txt\",       sep=\"/\")\n\ttesty  \t<- paste(datadir, \"test/y_test.txt\",       sep=\"/\")\t\n\ttestsubj\t<- paste(datadir, \"test/subject_test.txt\", sep=\"/\")\n\n\t# training data set\n\ttrainx \t<- paste(datadir, \"train/X_train.txt\"      , sep=\"/\")\n\ttrainy  \t<- paste(datadir, \"train/y_train.txt\"\t , sep=\"/\")\n\ttrainsubj\t<- paste(datadir, \"train/subject_train.txt\", sep=\"/\")\n\n\t# original feature names from original data authors\n\tfeatNames\t<- paste(datadir, \"./features.txt\", sep=\"/\")\n\t\n\t# When joining files, I am adopting the convention that test comes first, \n\t# then train (test are top rows, train appended at bottom)\n\n\t# -------------------------------------------------------------------------\n\t# create first column (subjectid) from subject_test and subject_train files\n\t# -------------------------------------------------------------------------\n\tsubjcomboDF <- rbind(read.csv(testsubj,  col.names = \"subjectid\",  header=FALSE),\n\t\t\t\t   read.csv(trainsubj, col.names = \"subjectid\",  header=FALSE))\n\t\n\tsubjcomboDF[,1] <- as.factor(subjcomboDF[,1])\n\t# -------------------------------------------------------------------------\n\t# create second column (activity) from y_test and y_train files\n\t# -------------------------------------------------------------------------\n\tycomboDF <- rbind(read.csv(testy,  col.names = \"activity\",  header=FALSE), \n\t\t\t\tread.csv(trainy, col.names = \"activity\",  header=FALSE))\n\n\t# convert numeric activity IDs into descriptive factors\n\tactivitylist <- c(\"Walking\", \"Walking up stairs\", \"Walking down stairs\",\n\t\t\t\t\t \"Sitting\", \"Standing\", \"Laying\")\n\t\n\tycomboDF[,1] <- factor(ycomboDF[,1], labels=activitylist)\n\n\t# -------------------------------------------------------------------------\n\t# create 561 data columns x_test and x_train files\n\t# -------------------------------------------------------------------------\n\txtestDF  <- read.table(testx,  header=FALSE)\n\txtrainDF <- read.table(trainx, header=FALSE)\n\txcomboDF <- rbind(xtestDF, xtrainDF)\n\t\n\t# do not modify names until after subsetting (much easier !!!)\n\t# space delimited file, read only 2nd column\n\tlonglist <- read.table(featNames, sep=\" \", header=FALSE)[,2]\n\t\t\n\t# add column names\n\tcolnames(xcomboDF) <- longlist\n\t\n\t# combine everything into (tidy) complete data set \n\ttempDF <- cbind(subjcomboDF, ycomboDF, xcomboDF)\n\t\n\t# save tidy complete data set (not required, but nice to have)\n\twrite.table(tempDF, \"./completeDF.txt\", sep=\"\\t\")\n\t\n\t## ========================================================================\n\t##  PART 2. Creating Desired Tidy Data Subset\n\t## ========================================================================\n\n\t# -------------------------------------------------------------------------\n\t# Subsetting data to include only mean and standard deviation data\n\t# -------------------------------------------------------------------------\n\t# make a data table so we can use dcast.data.table\n\t\n\ttidyDF <- data.table(cbind(xcomboDF[c(grep(\"mean\\\\(\\\\)\\\\-\", names(xcomboDF)), \n\t\t\t                          grep(\"std\\\\(\\\\)\\\\-\",  names(xcomboDF)))]))\n\n\t# -------------------------------------------------------------------------\n\t# modify column labels for remaining 50 data columns x_test and x_train files\n\t# ------------------------------------------------------------------------\n\tshortlist <- colnames(tidyDF)\n\n\t# remove ()- and other -\n\tshortlist <- gsub(\"mean\\\\(\\\\)\\\\-\", \"Mean\", shortlist)\n\tshortlist <- gsub(\"std\\\\(\\\\)\\\\-\", \"StdDev\", shortlist)\n\tshortlist <- gsub(\"\\\\-\", \"\", shortlist)\n\t\n\t# indicate time or frequency data more clearly\n\tshortlist <- gsub(\"^t\", \"time\", shortlist)\n\tshortlist <- gsub(\"^f\", \"frequency\", shortlist)\n\t\n\t# change Acc to Accelerometer and Gyro to Gyroscope\n\tshortlist <- gsub(\"Acc\", \"Accelerometer\", shortlist)\n\tshortlist <- gsub(\"Gyro\", \"Gyroscope\", shortlist)\t\n\n\tsetnames(tidyDF, shortlist)\n\t\n\ttidyDF <- cbind(subjcomboDF, ycomboDF, tidyDF)\n\t# \n\t## ========================================================================\n\t##  PART 3. Creating Desired Tidy Data Summary and Writing File\n\t## ========================================================================\n\n\t# -------------------------------------------------------------------------\n\t# average of means and standard deviations\n\t# -------------------------------------------------------------------------\n\ttidyMeltDT <- melt(tidyDT, id.vars=factorNames, measure.vars=shortlist)\n\ttidyOutDT <- dcast.data.table(tidyMeltDT, subjectid + activity ~ ..., fun=mean)\n\t\n\t# -------------------------------------------------------------------------\n\t# Output as a txt (tab-delinmited) file\n\t# -------------------------------------------------------------------------\n\twrite.table(tidyOutDT, \"tidyOut.txt\", sep=\"\\t\")\n\t\n\t# tidyOutDT\n}\n\n\n\n",
    "created" : 1401053567228.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "138137739",
    "id" : "AC310529",
    "lastKnownWriteTime" : 1401053494,
    "path" : "~/datacleaning/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}